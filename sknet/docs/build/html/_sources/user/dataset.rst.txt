.. _dataloading-label:

Dataset
=======

Dataset format
--------------

Each dataset has its own attiributes and specificities. To allow such
flexibility in Python we represent each dataset in a class inheriting from
a :mod:`dict` object. That is, each dataset is a Python dictionnary with
some key attributes s.a. "train_set" or "n_classes".
We refer to the last section for details and how to create its own dataset.

Pre-loaded Datasets
-------------------

Sknet provides comon dataset out-of-the-box in the :mod:`sknet.dataset` module as

- :class:`sknet.dataset.mnist`

- :class:`sknet.dataset.fashionmnist`

- :class:`sknet.dataset.svhn`

- :class:`sknet.dataset.cifar10`

- :class:`sknet.dataset.cifar100`

- :class:`sknet.dataset.stl10`

- :class:`sknet.dataset.warblr`

- :class:`sknet.dataset.freefield1010`

In order to work with a dataset one simply initializes the 
dataset class (we leave the constructor parameters as default)::

	cifar10 = sknet.dataset.cifar10()
	
the variable cifar10 is of DictType with all the dataset details as keys. For example, to lad the train and test set::

	train_x,train_y = cifar10["train_set"]
	test_x,test_y   = cifar10["test_set"]

Since cifar10 does not impose a valid set, :py:data:`cifar10["valid_set"]` will return an error as "valid_set" is not a key of cifar10 by default.
To access the image shape, the data format or additional dataset 
specific attributes simply do::

        data_format = cifar10["data_format"] # 'NCHW'
        datum_shape = cifar10["datum_shape"] # (3,32,32)

Accessing all the dataset attributes are obtained from :py:func:`cifar10.keys()` as with a standard dictionnary. 

All the pre-coded dataset will be loaded from the path given by the 
environment variable :envvar:`DATASET_PATH`, or an alternative path given at initialization of the dataset class. If needs be, the dataset will
be downloaded into this path, prior loading (at first utilisation of
sknet for example). The saved dataset are in compressed format.


Open a pre-loaded dataset
-------------------------

Running the code _quickstart_data_loading.py


.. literalinclude:: ../../../../quickstart_data_loading.py
    :encoding: latin-1
    :language: python

will generate the following figure

.. rubric:: mnist

.. image:: https://i.imgur.com/Zri9DXy.png

.. rubric:: fashionmnist

.. image:: https://i.imgur.com/UxGv0Yc.png

.. rubric:: svhn

.. image:: https://i.imgur.com/4kfgD9a.png

.. rubric:: cifar10

.. image:: https://i.imgur.com/rSRJXAm.png

.. rubric:: cifar100 (superclass,class)

.. image:: https://i.imgur.com/htPYkpn.png 

.. rubric:: stl10

.. image:: https://i.imgur.com/w4HlyjK.png

.. rubric:: warblr

.. image:: https://i.imgur.com/w4HlyjK.png

.. rubric:: freefield1010

.. image:: https://i.imgur.com/w4HlyjK.png


Running for the first time will produce the following output and 
download all the dataset not already present in the default path:


.. include:: ../_static/data_loading_output_1.txt
   :literal:

running for the next times will produce:

.. include:: ../_static/data_loading_output_2.txt
   :literal:


Adding a dataset
----------------

You can simply use the :mod:`dataset.custom` and give (at least) the 
training set as well as the data_format and the number of classes.
We provide in the following minimal example using a random dataset 
highlighting the key features:

.. literalinclude:: ../../../../quickstart_custom_dataset.py
    :encoding: latin-1
    :language: python

.. _quickstart_data_loading.py: https://github.org/RandallBalestriero/sknet/quickstart_data_loading.py
.. _sknet.dataset: https://github.org/RandallBalestriero/sknet/sknet/dataset
